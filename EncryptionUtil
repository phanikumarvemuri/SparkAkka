package com.bac.rctt.apps.flowbot.util

import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter
import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.security.alias.CredentialProvider
import org.apache.hadoop.security.alias.CredentialProviderFactory
import com.bac.rctt.apps.flowbot.envelope.Envelope;

class EncryptionUtil() {

  val key = "Z8LSq0WwB5v+6Y=="

  def encrypt(plainTextString: String): String = {
    val aesKey: Key = new SecretKeySpec(key.getBytes(), "AES")
    val cipher: Cipher = Cipher.getInstance("AES")
    cipher.init(Cipher.ENCRYPT_MODE, aesKey)
    val encryptedBytes = cipher.doFinal(plainTextString.getBytes())
    val encryptedValue = DatatypeConverter.printBase64Binary(encryptedBytes)
    return encryptedValue
  }

  def decrypt(encryptedString: String): String = {
    val aesKey: Key = new SecretKeySpec(key.getBytes(), "AES")
    val cipher: Cipher = Cipher.getInstance("AES")
    cipher.init(Cipher.DECRYPT_MODE, aesKey)
    val decordedValue = DatatypeConverter.parseBase64Binary(encryptedString)
    val decryptedValue = cipher.doFinal(decordedValue)
    return new String(decryptedValue)
  }
  
  	/** Given hadoop jceks password provider location and alias name, returns decrypted password. */
  def decryptJceks(jceksPasswordProvider: String, jceksAlias: String): String = {
    val conf = new Configuration()
    conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, jceksPasswordProvider)
    val provider = CredentialProviderFactory.getProviders(conf).get(0)
    val credEntry = provider.getCredentialEntry(jceksAlias)
    val password = credEntry.getCredential()
    return new String(password)
  }

  /** This function is a wrapper for decrypt and decryptJceks.
   *  Depending on what property is passed as password in flow config, it calls appropriate method as applicable. */
  def decryptPassword(envelope: Envelope, step: String): String = {
    envelope.getAttribute(step + ".password") match {
      case u if u.startsWith("jceks://") => {
        return new EncryptionUtil().decryptJceks(envelope.getAttribute(step + ".password"), envelope.getAttribute(step + ".alias"))
      }
      case _ => {
        return new EncryptionUtil().decrypt(envelope.getAttribute(step + ".password"))
      }
    }
  }
}
