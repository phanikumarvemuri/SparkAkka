def line = ''
def exists = false

pipeline {
	agent any
	tools {
		maven 'mvn1'
		jdk 'jdk1'
	}
	environment {
        	PROJECT_DIR_NAME = ''
        	PROJECT_NAME    = ''
        	PROJECT_COMPONENT_NAME = ''
		VERSION_MAJOR = 1
		VERSION_MINOR = 0
		VERSION_DOT = 0
		VERSION = '1.0.0'
	}
    	parameters {
		string(defaultValue:'jenkins_integration',description:'',name:'BRANCH_NAME')
	}
		
	stages {
		 stage('checkout') {
			steps {
				echo "Checking out git code"
			    	cleanWs()
                		checkout([$class: 'GitSCM', branches: [[name: '*/'+"${params.BRANCH_NAME}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '775f0be5-8030-40b6-b37d-8d5fc90d84d4', url: '']]])

			}
		
		} 
		stage('maven_build') {
		    
			steps {
			     echo 'checkout completed'
			     script {
			        exists = fileExists 'pom.xml'
			        if(exists) {
				             sh 'mvn clean package'  
			        }
			     }
			}
			
		}
			
		stage('build_parcel') {
		    steps {
				echo 'Building Parcel for Develop Branch'
			    	script{
			    	    if( "${params.BRANCH_NAME}" == 'develop') {
			    	        	line = sh(script: """
                                            			rm -rf ${PROJECT_DIR_NAME}-${VERSION}
				                            	mkdir ${PROJECT_DIR_NAME}-${VERSION}
								if(${exists});then
								  rsync -rv --exclude='.git*' --exclude=${PROJECT_DIR_NAME}-${VERSION} athena_src/* target/*.jar ${PROJECT_DIR_NAME}-${VERSION}
								else
								  rsync -rv --exclude='.git*' --exclude=${PROJECT_DIR_NAME}-${VERSION} * ${PROJECT_DIR_NAME}-${VERSION}
								fi
								sed "s/<VERSION>/${VERSION}/g" meta/parcel.json > ${PROJECT_DIR_NAME}-${VERSION}/meta/parcel.json
				                            	tar czvf ${PROJECT_DIR_NAME}-${VERSION}-el7.parcel ${PROJECT_DIR_NAME}-${VERSION}
				                            	sha1sum ${PROJECT_DIR_NAME}-${VERSION}-el7.parcel | cut -d' ' -f1 >${PROJECT_DIR_NAME}-${VERSION}-el7.parcel.sha1
				                            	${PROJECT_DIR_NAME}_SHA1=`cat ${PROJECT_DIR_NAME}-${VERSION}-el7.parcel.sha1`
				                            	rm -rf ${PROJECT_DIR_NAME}-${VERSION}
								mv ${PROJECT_DIR_NAME}-${VERSION}-el7.parcel* /var/www/html/parcels/${PROJECT_NAME}/
							        sed -i 's/]}//g' /var/www/html/parcels/${PROJECT_NAME}/manifest.json
								cat << EOF >> /var/www/html/parcels/${PROJECT_NAME}/manifest.json
       ,{
      	     "parcelName": "${PROJECT_DIR_NAME}-${VERSION}-el7.parcel",
             "components": [
                {
                    "pkg_version": "${PROJECT_DIR_NAME}-${VERSION}",
                    "name": "${PROJECT_COMPONENT_NAME}",
                    "version": "${PROJECT_DIR_NAME}-${VERSION}"
                }
            ],
            "conflicts": "CDH (<< 5.0.0), CDH (>> 5.14.0.)",
            "hash": "\${${PROJECT_DIR_NAME}_SHA1}"
        }
]}
EOF
											
											
										
					""" ,returnStdout: true)
			    	    }
			    	}
		    }
		    
		}
		
		stage('submit tag'){
		    steps {
			    script {
		            if( "${params.BRANCH_NAME}" == 'develop') {
					 
					line = sh(script:"""   LAST_BUILD_NUM=`git tag --list | grep "dev" | cut -d'.' -f4 | sed 's/[^0-9]*//g' |  sort -n | tail -n1`
								if [ -z "\${LAST_BUILD_NUM}" ]; then 
								          CURRENT_BUILD_NUM=0
								else 
								          CURRENT_BUILD_NUM=\$((LAST_BUILD_NUM + 1)) 
								fi
								echo "\${CURRENT_BUILD_NUM}"
							  """, returnStdout: true)
					def CURRENT_BUILD_NUM = line.split('\n')[0]
					echo 'BUILD_NUMBER: ' + "${CURRENT_BUILD_NUM}"
					echo "creating develop branch tag"
					echo "Git Tag Name: " +  "${VERSION}-dev${CURRENT_BUILD_NUM}"
					sh 'git tag -a ' +  "${VERSION}-dev${CURRENT_BUILD_NUM}"  + ' -m "creating tag using jenkins"'
					sh 'git tag --list'
					sh 'git push origin --tags'  
					}
                        
			   }
		   }
	    }
		
	}
	post {
			
			always{
				echo "Build stage complete"
				//slackSend color: 'good', message: "Build ${env.BUILD_NUMBER} \ completed for  ${env.JOB_NAME}.  Details: (<${env.BUILD_URL} | \ here >)"
	        }
			success {
					echo 'build was successfull'
					//slackSend color: 'good', message: "Build ${env.BUILD_NUMBER} \ completed for  ${env.JOB_NAME}.  Details: (<${env.BUILD_URL} | \ here >)"
					//mail body: 'build succeeded', subject: 'Build Succeeded', to: ''
			}
				
			failure {
					echo 'build failed'
					//mail body: 'build failed', subject: 'Build failed!', to: '  
				
			}
			
	}

}
